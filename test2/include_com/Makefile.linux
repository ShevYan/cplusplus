# SlickEdit generated file.  Do not edit this file except in designated areas.

# Make command to use for dependencies
MAKE=make
RM=rm
MKDIR=mkdir

# -----Begin user-editable area-----

# -----End user-editable area-----

# If no configuration is specified, "Debug" will be used
ifndef CFG
CFG=Debug
endif

#
# Configuration: Debug
#
ifeq "$(CFG)" "Debug"
OUTDIR=Debug
OUTFILE=$(OUTDIR)/libcomutility.so
CFG_INC=-I. 
CFG_LIB=
CFG_OBJ=
COMMON_OBJ=$(OUTDIR)/FiContext.o $(OUTDIR)/FiDict.o $(OUTDIR)/FiErr.o \
	$(OUTDIR)/FiLog.o $(OUTDIR)/FiMemory.o $(OUTDIR)/FiThreads.o \
	$(OUTDIR)/GetIP.o $(OUTDIR)/Markup.o $(OUTDIR)/OSEvent.o \
	$(OUTDIR)/OSMutex.o $(OUTDIR)/OSSemaphore.o $(OUTDIR)/OSThread.o \
	$(OUTDIR)/OSUtility.o $(OUTDIR)/ShareLock.o $(OUTDIR)/bitmap.o \
	$(OUTDIR)/c_socket.o $(OUTDIR)/c_wait_for.o $(OUTDIR)/error_def.o \
	$(OUTDIR)/fitimer.o $(OUTDIR)/md5.o $(OUTDIR)/perf.o \
	$(OUTDIR)/pipetransfer.o $(OUTDIR)/sctp_crc32.o $(OUTDIR)/sv_sem.o \
	$(OUTDIR)/sv_shm.o $(OUTDIR)/tcpsocket.o $(OUTDIR)/udpsocket.o 
OBJ=$(COMMON_OBJ) $(CFG_OBJ)
ALL_OBJ=$(OUTDIR)/FiContext.o $(OUTDIR)/FiDict.o $(OUTDIR)/FiErr.o \
	$(OUTDIR)/FiLog.o $(OUTDIR)/FiMemory.o $(OUTDIR)/FiThreads.o \
	$(OUTDIR)/GetIP.o $(OUTDIR)/Markup.o $(OUTDIR)/OSEvent.o \
	$(OUTDIR)/OSMutex.o $(OUTDIR)/OSSemaphore.o $(OUTDIR)/OSThread.o \
	$(OUTDIR)/OSUtility.o $(OUTDIR)/ShareLock.o $(OUTDIR)/bitmap.o \
	$(OUTDIR)/c_socket.o $(OUTDIR)/c_wait_for.o $(OUTDIR)/error_def.o \
	$(OUTDIR)/fitimer.o $(OUTDIR)/md5.o $(OUTDIR)/perf.o \
	$(OUTDIR)/pipetransfer.o $(OUTDIR)/sctp_crc32.o $(OUTDIR)/sv_sem.o \
	$(OUTDIR)/sv_shm.o $(OUTDIR)/tcpsocket.o $(OUTDIR)/udpsocket.o 

COMPILE=g++ -c  "-D_POSIX_" "-DFI_LINUX" -g -fPIC -pg -o "$(OUTDIR)/$(*F).o" $(CFG_INC) "$<"
LINK=g++  -g -shared -fPIC -pg -o "$(OUTFILE)" $(ALL_OBJ)

# Pattern rules
$(OUTDIR)/%.o : %.cpp
	$(COMPILE)

$(OUTDIR)/%.o : %.c
	$(COMPILE)

# Build rules
all: $(OUTFILE)

$(OUTFILE): $(OUTDIR)  $(OBJ)
	$(LINK)
	-cp ./Debug/*.so ../../bin/
	-cp ./Debug/*.so /usr/local/lib/

$(OUTDIR):
	$(MKDIR) -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	$(RM) -f $(OUTFILE)
	$(RM) -f $(OBJ)

# Clean this project and all dependencies
cleanall: clean
endif

#
# Configuration: Release
#
ifeq "$(CFG)" "Release"
OUTDIR=Release
OUTFILE=$(OUTDIR)/libcomutility.so
CFG_INC=-I. 
CFG_LIB=
CFG_OBJ=
COMMON_OBJ=$(OUTDIR)/FiContext.o $(OUTDIR)/FiDict.o $(OUTDIR)/FiErr.o \
	$(OUTDIR)/FiLog.o $(OUTDIR)/FiMemory.o $(OUTDIR)/FiThreads.o \
	$(OUTDIR)/GetIP.o $(OUTDIR)/Markup.o $(OUTDIR)/OSEvent.o \
	$(OUTDIR)/OSMutex.o $(OUTDIR)/OSSemaphore.o $(OUTDIR)/OSThread.o \
	$(OUTDIR)/OSUtility.o $(OUTDIR)/ShareLock.o $(OUTDIR)/bitmap.o \
	$(OUTDIR)/c_socket.o $(OUTDIR)/c_wait_for.o $(OUTDIR)/error_def.o \
	$(OUTDIR)/fitimer.o $(OUTDIR)/md5.o $(OUTDIR)/perf.o \
	$(OUTDIR)/pipetransfer.o $(OUTDIR)/sctp_crc32.o $(OUTDIR)/sv_sem.o \
	$(OUTDIR)/sv_shm.o $(OUTDIR)/tcpsocket.o $(OUTDIR)/udpsocket.o 
OBJ=$(COMMON_OBJ) $(CFG_OBJ)
ALL_OBJ=$(OUTDIR)/FiContext.o $(OUTDIR)/FiDict.o $(OUTDIR)/FiErr.o \
	$(OUTDIR)/FiLog.o $(OUTDIR)/FiMemory.o $(OUTDIR)/FiThreads.o \
	$(OUTDIR)/GetIP.o $(OUTDIR)/Markup.o $(OUTDIR)/OSEvent.o \
	$(OUTDIR)/OSMutex.o $(OUTDIR)/OSSemaphore.o $(OUTDIR)/OSThread.o \
	$(OUTDIR)/OSUtility.o $(OUTDIR)/ShareLock.o $(OUTDIR)/bitmap.o \
	$(OUTDIR)/c_socket.o $(OUTDIR)/c_wait_for.o $(OUTDIR)/error_def.o \
	$(OUTDIR)/fitimer.o $(OUTDIR)/md5.o $(OUTDIR)/perf.o \
	$(OUTDIR)/pipetransfer.o $(OUTDIR)/sctp_crc32.o $(OUTDIR)/sv_sem.o \
	$(OUTDIR)/sv_shm.o $(OUTDIR)/tcpsocket.o $(OUTDIR)/udpsocket.o 

COMPILE=g++ -c  "-D_POSIX_" "-DFI_LINUX" -fPIC -pg -o "$(OUTDIR)/$(*F).o" $(CFG_INC) "$<"
LINK=g++  -shared -fPIC -pg -o "$(OUTFILE)" $(ALL_OBJ)

# Pattern rules
$(OUTDIR)/%.o : %.cpp
	$(COMPILE)

$(OUTDIR)/%.o : %.c
	$(COMPILE)

# Build rules
all: $(OUTFILE)

$(OUTFILE): $(OUTDIR)  $(OBJ)
	$(LINK)
	-cp ./Debug/*.so ../../bin/
	-cp ./Debug/*.so /usr/local/lib/

$(OUTDIR):
	$(MKDIR) -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	$(RM) -f $(OUTFILE)
	$(RM) -f $(OBJ)

# Clean this project and all dependencies
cleanall: clean
endif
